import React, {useState} from 'react';
import {useSelector, useDispatch} from 'react-redux';

import {closeExchangeSettingsModal} from '../actions';
import {ExchangeCredentials} from '../types';

const ExchangeSettingsModal: React.FC = () => {
    const dispatch = useDispatch();
    // Try multiple paths for different Mattermost versions
    const isOpen = useSelector((state: any) => {
        console.log('Exchange Plugin: Current Redux state:', state);
        // Check different possible state paths for different Mattermost versions
        const paths = [
            state.plugins?.plugins?.['com.mattermost.exchange-plugin']?.isSettingsModalOpen,
            state['plugins/com.mattermost.exchange-plugin']?.isSettingsModalOpen,
            state.plugins?.['com.mattermost.exchange-plugin']?.isSettingsModalOpen,
            state.exchangePlugin?.isSettingsModalOpen
        ];
        
        const result = paths.find(path => path !== undefined) || false;
        console.log('Exchange Plugin: Modal isOpen:', result);
        return result;
    });
    
    const [credentials, setCredentials] = useState<ExchangeCredentials>({
        username: '',
        password: '',
        domain: '',
    });
    
    const [isTestingConnection, setIsTestingConnection] = useState(false);
    const [testResult, setTestResult] = useState<{success: boolean; message: string} | null>(null);
    const [isSaving, setIsSaving] = useState(false);

    const handleClose = () => {
        dispatch(closeExchangeSettingsModal());
        setTestResult(null);
    };

    const handleInputChange = (field: keyof ExchangeCredentials, value: string) => {
        setCredentials(prev => ({
            ...prev,
            [field]: value,
        }));
        setTestResult(null); // Clear test result when credentials change
    };

    const testConnection = async () => {
        if (!credentials.username || !credentials.password) {
            setTestResult({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å',
            });
            return;
        }

        setIsTestingConnection(true);
        
        try {
            const response = await fetch(`/plugins/com.mattermost.exchange-plugin/api/v1/test-connection`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                },
                body: JSON.stringify(credentials),
            });

            const result = await response.json();
            setTestResult(result);
        } catch (error) {
            setTestResult({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
            });
        } finally {
            setIsTestingConnection(false);
        }
    };

    const saveCredentials = async () => {
        if (!credentials.username || !credentials.password) {
            setTestResult({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
            });
            return;
        }

        setIsSaving(true);
        
        try {
            const response = await fetch(`/plugins/com.mattermost.exchange-plugin/api/v1/credentials`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                },
                body: JSON.stringify(credentials),
            });

            if (response.ok) {
                setTestResult({
                    success: true,
                    message: '–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
                });
                // Close modal after 2 seconds
                setTimeout(() => {
                    handleClose();
                }, 2000);
            } else {
                const errorText = await response.text();
                setTestResult({
                    success: false,
                    message: errorText || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                });
            }
        } catch (error) {
            setTestResult({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
            });
        } finally {
            setIsSaving(false);
        }
    };

    // Force show modal for debugging
    const forceShow = window.exchangePluginForceShowModal || isOpen;
    console.log('Exchange Plugin: Modal render - isOpen:', isOpen, 'forceShow:', forceShow);
    
    if (!forceShow) {
        return null;
    }

    return (
        <div className={`modal fade ${forceShow ? 'show' : ''}`} style={{display: forceShow ? 'block' : 'none', zIndex: 9999}}>
            <div className="modal-dialog modal-lg">
                <div className="modal-content">
                    <div className="modal-header">
                        <h4 className="modal-title">
                            üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Exchange Integration
                        </h4>
                        <button type="button" className="close" onClick={handleClose}>
                            <span>&times;</span>
                        </button>
                    </div>
            
                    <div className="modal-body">
                <div className="form-group">
                    <label className="control-label">
                        –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <span className="error-text">*</span>
                    </label>
                    <input
                        type="text"
                        className="form-control"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        value={credentials.username}
                        onChange={(e) => handleInputChange('username', e.target.value)}
                    />
                    <div className="help-text">
                        –í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–æ–º–µ–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ivan.petrov)
                    </div>
                </div>

                <div className="form-group">
                    <label className="control-label">
                        –ü–∞—Ä–æ–ª—å <span className="error-text">*</span>
                    </label>
                    <input
                        type="password"
                        className="form-control"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                        value={credentials.password}
                        onChange={(e) => handleInputChange('password', e.target.value)}
                    />
                    <div className="help-text">
                        –í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Exchange
                    </div>
                </div>

                <div className="form-group">
                    <label className="control-label">
                        –î–æ–º–µ–Ω
                    </label>
                    <input
                        type="text"
                        className="form-control"
                        placeholder="DOMAIN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        value={credentials.domain}
                        onChange={(e) => handleInputChange('domain', e.target.value)}
                    />
                    <div className="help-text">
                        –î–æ–º–µ–Ω Active Directory (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
                    </div>
                </div>

                {testResult && (
                    <div className={`alert ${testResult.success ? 'alert-success' : 'alert-danger'}`}>
                        {testResult.message}
                    </div>
                )}

                <div className="form-group">
                    <div className="help-text">
                        <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. 
                        –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
                    </div>
                </div>
                    </div>
                    
                    <div className="modal-footer">
                        <button
                            type="button"
                            className="btn btn-default"
                            onClick={handleClose}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        
                        <button
                            type="button"
                            className="btn btn-secondary"
                            onClick={testConnection}
                            disabled={isTestingConnection || !credentials.username || !credentials.password}
                        >
                            {isTestingConnection ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
                        </button>
                        
                        <button
                            type="button"
                            className="btn btn-primary"
                            onClick={saveCredentials}
                            disabled={isSaving || !credentials.username || !credentials.password}
                        >
                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ExchangeSettingsModal; 